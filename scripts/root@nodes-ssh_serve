#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

function error($message, $log_file = null)
{
    echo json_encode(array(
        'error' => true,
        'message' => $message,
    ));

    if (!is_null($log_file)) {
        file_put_contents($log_file, date('c') . " [error] $message\n", FILE_APPEND);
    }

    die();
}

function exec_m2($cmd)
{
    $descriptorspec = array(
        0 => array("pipe", "r"),
        1 => array("pipe", "w"),
        2 => array("pipe", "w"),
    );
    $cwd = __DIR__;
    $env = array(); //'some_option' => 'aeiou');

    $proc = proc_open($cmd, $descriptorspec, $pipes, $cwd, $env);
    $stdout = stream_get_contents($pipes[1]);
    $stderr = stream_get_contents($pipes[2]);
    $ret = proc_close($proc);

    return array(
        'stdout' => $stdout,
        'stderr' => $stderr,
        'code' => $ret,
    );
}

function main()
{
    if (!getenv('SSH_ORIGINAL_COMMAND')) {
        return error('There is no SSH_ORIGINAL_COMMAND env');
    }

    $command = getenv('SSH_ORIGINAL_COMMAND');
    list($method) = explode(' ', $command, 2);

    switch ($method) {
    case 'init':
        list(, $id, $option) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            echo json_encode(array('error' => true, 'message' => 'id is not found'));
            break;
        }
        $port = 20000 + $id;
        $start = microtime(true);
        $log_file = "/srv/chroot/{$id}.log";
        touch("/srv/chroot/{$id}.docker");
        file_put_contents($log_file, date('c') . " [init] start\n", FILE_APPEND);

        // init 在 docker 下甚麼都不用做

        $aaspent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [init] done(spent: {$spent})\n", FILE_APPEND);

        echo json_encode(array('error' => false, 'port' => $port));
        break;

    case 'clone':
        list(, $project_name, $id, $flag) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        $log_file = "/srv/chroot/{$id}.log";
        if (!$id) {
            die("invalid $id");
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        file_put_contents($log_file, date('c') . " [clone] project: {$project_name}\n", FILE_APPEND);
        file_put_contents($log_file, date('c') . " [clone] init lang base\n", FILE_APPEND);
        file_put_contents("/srv/chroot/{$id}.project", $project_name);
        $weblog_dir = "/srv/chroot/{$id}/srv/logs";
        if (file_exists($weblog_dir)) {
            system("rm -rf " . escapeshellarg($weblog_dir));
        }
        mkdir($weblog_dir, 0777, true);

        $cmd = "ssh git@" . GIT_SERVER . " build-docker-project-image " . $project_name;
        $build_image_result = strval(`$cmd`);
        if (!preg_match('#success:(.*)#', $build_image_result, $matches)) {
            return error('build project base failed: ' . $project_name);
        }

        $docker_registry = getenv('DOCKER_REGISTRY');
        $image = "{$docker_registry}/image-{$project_name}";
        $ret = exec_m2("docker --config /srv/config/docker pull $image");
        if ($ret['code']) {
            $ret['error'] = true;
            $ret['message'] = "docker pull $image failed";
            file_put_contents($log_file, date('c') . " [clone] code={$ret} error: " . json_encode($ret) . "(spent: $spent)\n", FILE_APPEND);

            echo json_encode($ret);
            exit($ret['code']);
            break;
        }

        $port = 20000 + $id;
        $ret = exec_m2("docker create --oom-kill-disable -v /srv/chroot/{$id}/srv/logs:/srv/logs --publish {$port}:80 --name c-{$id} {$image} init");
        if ($ret['code']) {
            $ret['error'] = true;
            $ret['message'] = "docker create $image to c-{$id} failed";
            file_put_contents($log_file, date('c') . " [clone] code={$ret} error: " . json_encode($ret) . "(spent: $spent)\n", FILE_APPEND);

            echo json_encode($ret);
            exit($ret['code']);
            break;
        }
        $ret = exec_m2("docker start c-{$id}");
        if ($ret['code']) {
            $ret['error'] = true;
            $ret['message'] = "docker start c-{$id} failed";
            file_put_contents($log_file, date('c') . " [clone] code={$ret} error: " . json_encode($ret) . "(spent: $spent)\n", FILE_APPEND);

            echo json_encode($ret);
            exit($ret['code']);
            break;
        }

        file_put_contents($log_file, date('c') . " [clone] post-clone.sh\n", FILE_APPEND);
        if ('no-post-clone' != $flag) {
            exec("docker exec c-{$id} /post-clone.sh {$port}");
        }

        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [clone] done(spent: $spent)\n", FILE_APPEND);
        echo json_encode(array('error' => false, 'port' => $port));
        break;

    case 'restart-web':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }

        $log_file = "/srv/chroot/{$id}.log";
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }

        file_put_contents($log_file, date('c') . " [restart-web] loading project variables\n", FILE_APPEND);
        $params = array('project=' . escapeshellcmd($project->name));
        $params[] = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
        foreach ($project->variables as $variable) {
            if (strpos($variable->key, 'file:') === 0) {
                list($filepath, $content) = explode("\n", $variable->getValue(), 2);
                $tmpfile = tempnam('/tmp/', 'config-');
                chmod($tmpfile, 0644);
                file_put_contents($tmpfile, $content);
                $ret = exec_m2(sprintf("docker cp %s c-%d:%s", escapeshellarg($tmpfile), $id, escapeshellarg($filepath)));
                unlink($tmpfile);
            } else {
                $params[] = escapeshellcmd($variable->key) . '=' . escapeshellarg($variable->getValue());
            }
        }
        $uid = 20000 + $id;

        if (file_exists('/srv/code/hisoku/dockers/generated-config/')) {
            $ret = exec_m2("docker cp /srv/code/hisoku/dockers/generated-config/* c-{$id}:/");
        }

        $ret = exec_m2("docker exec c-{$id} mkdir /srv/logs");
        file_put_contents($log_file, date('c') . " [restart-web] start-web.sh\n", FILE_APPEND);
        $ret = exec_m2("docker exec c-{$id} env " . implode(" ", $params) . " /start-web.sh", $ret);
        if ($ret['code']) {
            $ret['error'] = true;
            $ret['message'] = "docker exec start-web failed";
            file_put_contents($log_file, date('c') . " [restart-web] code={$ret} error: " . json_encode($ret) . "(spent: $spent)\n", FILE_APPEND);

            echo json_encode($ret);
            exit($ret['code']);
            break;
        }

        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [restart-web] code={$ret} done(spent: $spent)\n", FILE_APPEND);
        echo json_encode(array('error' => false, 'port' => $port));
        break;

    case 'run':
        list(, $project_name, $id, $run_cmd, $without_status) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        $start = microtime(true);
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $log_file = "/srv/chroot/{$id}.log";
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        file_put_contents($log_file, date('c') . " [run] run project: {$project_name} command: \"" . urldecode($run_cmd) . "\"\n", FILE_APPEND);

        file_put_contents($log_file, date('c') . " [run] loading project variables\n", FILE_APPEND);
        $params = array('project=' . escapeshellarg($project->name));
        foreach ($project->variables as $variable) {
            if (strpos($variable->key, 'file:') === 0) {
                list($filepath, $content) = explode("\n", $variable->getValue(), 2);
                $tmpfile = tempnam('/tmp/', 'config-');
                file_put_contents($tmpfile, $content);
                $ret = exec_m2(sprintf("docker cp %s c-%d:%s", escapeshellarg($tmpfile), $id, escapeshellarg($filepath)));
                unlink($tmpfile);
            } else {
                $params[] = escapeshellcmd($variable->key) . '=' . escapeshellarg($variable->getValue());
            }
        }
        $params[] = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
        $run_cmd = 'cd /srv/web; ' . urldecode($run_cmd);

        file_put_contents($log_file, date('c') . " [run] start\n", FILE_APPEND);
        $uid = 20000 + $id;
        if (getenv('TERM')) {
            $term_opt = ' -i -t';
            $params[] = 'TERM=' . escapeshellarg(getenv('TERM'));
        } else {
            $term_opt = '';
        }
        $cmd = "docker exec {$term_opt} c-{$id} env -i " . implode(" ", $params) . " sh -c " . escapeshellarg($run_cmd);
        $ret = 0;
        passthru($cmd, $ret);
        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [run] done(spent: {$spent})\n", FILE_APPEND);
        if (!$without_status) {
            echo "\n" . json_encode(array(
                'id' => $id,
                'code' => $ret,
                'start' => date('c', $start),
                'spent' => $spent,
                'term' => getenv('TERM'),
            ));
        }
        break;

    case 'check_alive':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $uid = 20000 + $id;
        $jobs = array();
        $output = trim(`docker top c-{$id} -o pid,start`);
        if (!$output) {
            echo json_encode(array('error' => true));
            exit;
        }

        foreach (array_slice(explode("\n", $output), 1) as $line) {
            list($pid, $start) = preg_split("/\s+/", $line, 2);
            $jobs[$pid] = new StdClass;
            $jobs[$pid]->pid = $pid;
            $jobs[$pid]->start_time = strtotime($start);
        }
        $output = trim(`docker top c-{$id} -o pid,comm`);
        foreach (array_slice(explode("\n", $output), 1) as $line) {
            list($pid, $comm) = preg_split("/\s+/", $line, 2);
            $jobs[$pid]->comm = trim($comm);
        }
        $output = trim(`docker top c-{$id} -o pid,cmd`);
        foreach (array_slice(explode("\n", $output), 1) as $line) {
            list($pid, $cmd) = preg_split("/\s+/", $line, 2);
            $jobs[$pid]->cmdline = trim($cmd);
        }

        $jobs = array_filter($jobs, function($job){ return $job->comm != 'systemd'; });
        $jobs = array_values($jobs);
        echo json_encode($jobs);
        break;

    case 'shutdown':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $log_file = "/srv/chroot/{$id}.log";
        $start = microtime(true);
        file_put_contents($log_file, date('c') . " [shutdown] start\n", FILE_APPEND);
        file_put_contents($log_file, date('c') . " [shutdown] /shutdown.sh\n", FILE_APPEND);

        $ret = exec_m2("docker stop c-{$id}");
        if ($ret['code']) {
            $ret['error'] = true;
            $ret['message'] = "docker stop c-{$id} failed";

            file_put_contents($log_file, date('c') . " [shutdown] code={$ret['code']} error: " . json_encode($ret) . "(spent: $spent)\n", FILE_APPEND);

            echo json_encode($ret);
            break;
        }
        $ret = exec_m2("docker rm -f c-{$id}");
        if ($ret['code']) {
            $ret['error'] = true;
            $ret['message'] = "docker rm c-{$id} failed";

            file_put_contents($log_file, date('c') . " [shutdown] code={$ret['code']} error: " . json_encode($ret) . "(spent: $spent)\n", FILE_APPEND);

            echo json_encode($ret);
            break;
        }

        exec_m2("docker network disconnect -f bridge c-{$id}");

        echo json_encode(array('error' => false, 'port' => $port));

        $spent = microtime(true) - $start;
        file_put_contents($log_file, date('c') . " [shutdown] done(spent: {$spent})\n", FILE_APPEND);
        if (file_exists("/srv/chroot/{$id}.project")) {
            unlink("/srv/chroot/{$id}.project");
        }
        break;

    default:
        return error('unknown command: ' . $method);
    }
    return;

}

main();
