#!/usr/bin/php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

// 回傳這台機器的 uptime, cpu load, disk, maximum process 等資訊
$ret = new StdClass;
$ret->hostname = gethostname();
$ret->uname = trim(`uname -a`);

// 硬碟資訊
$disks = array();

$df_result = explode("\n", trim(`df -P -a`));
for ($i = 1; $i < count($df_result); $i ++) {
    $rows = preg_split('/\s+/', trim($df_result[$i]));
    $columns = array('id', 'disk_total', 'disk_usage', 'disk_available', 'disk_capacity', 'mount_point');

    $disks[$rows[0]] = array_combine($columns, $rows);
}

$df_result = explode("\n", trim(`df -P -i`));
for ($i = 1; $i < count($df_result); $i ++) {
    $rows = preg_split('/\s+/', trim($df_result[$i]));
    $columns = array('id', 'inode_total', 'inode_usage', 'inode_available', 'inode_capacity', 'mount_point');

    $disks[$rows[0]] = array_merge($disks[$rows[0]], array_combine($columns, $rows));
}
$ret->disk = array_values($disks);

// cpu 資訊
if ($ret->process = trim(`top -w 200 -b -n 1 -c`)) {
} else if ($ret->process = trim(`top -b -n 1 -c`)) {
}
$ret->dmesg = trim(`dmesg | tail -n 100`);

// memory info
$ret->memory = new StdClass;
foreach (explode("\n", trim(file_get_contents('/proc/meminfo'))) as $line) {
    list($key, $value) = array_map('trim', explode(':', $line));
    $ret->memory->{$key} = $value;
}
// docker memory info
$fp = popen("docker ps --format '{{json .}}'", 'r');
$container_pid = array();
while ($line = fgets($fp)) {
        $container_obj = json_decode($line);

        $pid = trim(`docker inspect -f '{{.State.Pid}}' {$container_obj->Names}`);
        $container_obj->pid = $pid;
        $container_pid[$container_obj->Names] = $container_obj;
}
fclose($fp);

$fp = popen("ps -eo pid,ppid,%mem,%cpu,size,vsize,rssize,cmd --sort=-%mem", "r");
//   PID  PPID %MEM %CPU  SIZE    VSZ   RSS CMD
$columns = preg_split('/\s+/', trim(fgets($fp)));
$pid_children = new StdClass;
$pid_data = array();
while (false !== ($line = fgets($fp))) {
        $rows = preg_split('/\s+/', trim($line), count($columns));
        $values = array_combine($columns, $rows);

        if (!property_exists($pid_children, $values['PPID'])) {
                $pid_children->{$values['PPID']} = array();
        }
        $pid_children->{$values['PPID']}[] = $values['PID'];
        $pid_data[$values['PID']] = $values;
}
fclose($fp);

uasort($pid_data, function($a, $b) {
        return $b['RSS'] - $a['RSS'];
});

$get_all_children = null;
$get_all_children = function($pid) use (&$pid_children, &$get_all_children) {
        if (!property_exists($pid_children, $pid)) {
                return array();
        }
        $ret = $pid_children->{$pid};
        foreach ($pid_children->{$pid} as $child_pid) {
                $ret = array_merge($ret, $get_all_children($child_pid));
        }
        return $ret;
};

foreach ($container_pid as $cid => $obj) {
        $pid = $obj->pid;
        $ppid = $pid_data[$pid]['PPID'];
        $pids = $get_all_children($ppid);

        $total = 0;
        $process_data = array();
        foreach ($pids as $pid) {
                $total += $pid_data[$pid]['RSS'];
                $process_data[] = $pid_data[$pid];
        }
        $container_pid[$cid]->total_memory = $total;
        $container_pid[$cid]->process_data = $process_data;
}
uasort($container_pid, function($a, $b) { return $b->total_memory - $a->total_memory; });
$ret->docker_container_memory = $container_pid;

$pgsql_info = posix_getpwnam('postgres');
if ($pgsql_info) {
    $ret->pgsql_info = new StdClass;
    foreach (glob($pgsql_info['dir'] . '/*/main/base/*') as $db_path) {
        $terms = explode('/', $db_path);
        $oid = array_pop($terms);
        foreach (glob($db_path . '/*') as $f) {
            if (!property_exists($ret->pgsql_info, $oid)) {
                $ret->pgsql_info->{$oid} = 0;
            }
            $ret->pgsql_info->{$oid} = max($ret->pgsql_info->{$oid}, filemtime($f));
        }
    }
}

// TODO: 增加 firewall 是否有正常跑起來的資訊
$curl = curl_init('https://' . getenv('MAINPAGE_DOMAIN') . '/api/updatemachinestatus');
curl_setopt($curl, CURLOPT_POSTFIELDS, 'status=' . urlencode(json_encode($ret, JSON_UNESCAPED_UNICODE)));
curl_exec($curl);
curl_close($curl);


