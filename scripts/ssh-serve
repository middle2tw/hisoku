#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

class SSHServe
{
    public function error($message)
    {
        error_log($message);
    }

    public function main()
    {
        if (!getenv('SSH_ORIGINAL_COMMAND')) {
            return $this->error('There is no SSH_ORIGINAL_COMMAND env');
        }

        list($command, $args) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'), 2);

        Logger::log(array(array(
            'category' => 'git-ssh-serve', 
            'message' => time() . " {$_SERVER['argv'][1]}({$_SERVER['argv'][2]}) {$_SERVER['SSH_CLIENT']} {$command} {$args}"
        )));

        switch ($command) {
        case 'git-upload-pack':
        case 'git-receive-pack':
            return $this->gitCommand($command, $args);
        case 'run':
            return $this->runCommand($command, $args);
        case 'tunnel':
            return $this->tunnelCommand($command, $args);
        case 'log':
            return $this->logCommand($command, $args);
        case '/usr/lib/openssh/sftp-server':
            $server = new SFTPServer;
            $server->main($_SERVER['argv'][1]);
            return;
        default:
            return $this->error('Unknown command: ' . getenv('SSH_ORIGINAL_COMMAND'));
        }
    }

    public function logCommand($command, $args)
    {
        list($project_name, $type) = explode(' ', $args, 2);
        if (FALSE !== strpos($project_name, '.')) {
            return $this->error('invalid project name: ' . $project_name);
        }

        if (!$project = Project::find_by_name(strval($project_name))) {
            return $this->error('project not found: ' . $project_name);
        }

        if (!$user = User::find_by_name(strval($_SERVER['argv'][1]))) {
            return $this->error('invalid ssh key');
        }

        if (!$project->isMember($user)) {
            return $this->error('project not found: ' . $project_name);
        }

        if ($type == 'error') {
            $category = "app-{$project_name}-error";
        } else {
            $category = "app-{$project_name}";
        }
        system("tail -f /srv/logs/scribed/{$category}/{$category}_current");
    }

    public function tunnelCommand($command, $args)
    {
        list($project_name) = explode(' ', $args, 2);
        if (FALSE !== strpos($project_name, '.')) {
            return $this->error('invalid project name: ' . $project_name);
        }

        if (!$project = Project::find_by_name(strval($project_name))) {
            return $this->error('project not found: ' . $project_name);
        }

        if (!$user = User::find_by_name(strval($_SERVER['argv'][1]))) {
            return $this->error('invalid ssh key');
        }

        if (!$project->isMember($user)) {
            return $this->error('project not found: ' . $project_name);
        }
        echo "tunnel is up\r\n";
        sleep(3600);
    }

    public function signal_handler($signal)
    {
        if ($signal == SIGINT) {
            fwrite($this->node_stdio, chr(3));
        }
    }

    public function runCommand($command, $args)
    {
        list($project_name, $run_command) = explode(' ', $args, 2);
        if (FALSE !== strpos($project_name, '.')) {
            return $this->error('invalid project name: ' . $project_name);
        }

        if (!$project = Project::find_by_name(strval($project_name))) {
            return $this->error('project not found: ' . $project_name);
        }

        if (!$user = User::find_by_name(strval($_SERVER['argv'][1]))) {
            return $this->error('invalid ssh key');
        }

        if (!$project->isMember($user)) {
            return $this->error('project not found: ' . $project_name);
        }

        error_log('allocate node...');
        $node = $project->getCronNode();
        $node->update(array(
            'status' => WebNode::STATUS_CRONNODE,
        ));
        $node->updateAccessAt();


        $term = getenv('TERM');
        if ($term) {
            if (function_exists('ncurses_init')) {
                ncurses_init();
                ncurses_getmaxyx(STDSCR, $y, $x);
            }
            system('clear');
            error_log("start with term: {$term} (width: {$x}, height: {$y})\r" );
            $ret = $node->runJob($run_command, array(
                'term' => $term,
                'width' => $x,
                'height' => $y,
                'without_status' => 1,
            ));
        } else {
            error_log('start without term');
            $ret = $node->runJob($run_command, array('without_status' => 1));
        }

        $user_input = fopen('php://stdin', 'r');
        $user_output = fopen('php://stdout', 'w');
        $user_stderr = fopen('php://stderr', 'w');

        $read_streams = array(
            'node_output' => $ret->stdout,
            'node_stderr' => $ret->stderr,
            'user_input' => $user_input,
        );
        stream_set_blocking($ret->stdout, false);
        stream_set_blocking($ret->stderr, false);
        stream_set_blocking($user_input, false);

        declare(ticks = 1);
        $this->node_stdio = $ret->stdio;
        pcntl_signal(SIGINT, array($this, "signal_handler"));

        while (array_key_exists('node_output', $read_streams)) {
            foreach ($read_streams as $key => $read_stream) {
                if (!is_resource($read_stream)) {
                    unset($read_stream[$key]);
                    continue;
                }
                if (false !== ($line = fread($read_stream, 4096))) {
                    if (feof($read_stream)) {
                        if ($key === 'user_input') {
                            break 2;
                        }
                        unset($read_streams[$key]);
                        break;
                    }
                    if ($line === '') {
                        continue;
                    }

                    if ('node_output' == $key) {
                        fwrite($user_output, $line);
                    } elseif ('node_stderr' == $key) {
                        fwrite($user_stderr, $line);
                    } elseif ('user_input' == $key) {
                        fwrite($ret->stdio, $line);
                    }
                }
            }
            usleep(100);
        }
        $node->markAsWait();
    }

    public function gitCommand($command, $args)
    {
        $project_name = trim($args, "' ");
        if (preg_match('#^(.*)\.git$#', $project_name, $matches)) {
            $project_name = $matches[1];
        }
        if (FALSE !== strpos($project_name, '.')) {
            return $this->error('invalid project name: ' . $project_name);
        }

        if (!$project = Project::find_by_name(strval($project_name))) {
            return $this->error('project not found: ' . $project_name);
        }

        if (!$user = User::find_by_name(strval($_SERVER['argv'][1]))) {
            return $this->error('invalid ssh key');
        }

        if (!$project->isMember($user)) {
            return $this->error('project not found: ' . $project_name);
        }

        $absolute_path = getenv('HOME') . '/git/' . $project->id . '.git';
        if (!file_exists($absolute_path)) {
            exec('git init --bare ' . escapeshellarg($absolute_path));
            // add hooks
            symlink('/srv/code/hisoku/scripts/pre-receive', $absolute_path . '/hooks/pre-receive');
        }

        passthru('git shell -c ' . escapeshellarg($command . ' ' . escapeshellarg($absolute_path)));
    }
}

$ssh_serve = new SSHServe;
$ssh_serve->main();
